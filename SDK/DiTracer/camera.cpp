#include "camera.h"

using namespace optix;

Camera::Camera() :
	SceneElement()
{

}

//**************************************************************************************************************************
//**************************************************************************************************************************

Camera::~Camera() {

}

//**************************************************************************************************************************
//**************************************************************************************************************************

optix::float3 Camera::getCamEye() const {
	return camEye;
}

//**************************************************************************************************************************
//**************************************************************************************************************************

optix::float3 Camera::getLookAt() const {
	return lookAt;
}

//**************************************************************************************************************************
//**************************************************************************************************************************

optix::float3 Camera::getUpVector() const {
	return upVector;
}

//**************************************************************************************************************************
//**************************************************************************************************************************

float Camera::getFov() const {
	return fov;
}

//**************************************************************************************************************************
//**************************************************************************************************************************

float Camera::getAspectRatio() const {
	return aspectRatio;
}

//**************************************************************************************************************************
//**************************************************************************************************************************

void Camera::setCamEye(optix::float3 camEye) {
	this->camEye = camEye;
}

//**************************************************************************************************************************
//**************************************************************************************************************************

void Camera::setLookAt(optix::float3 lookAt) {
	this->lookAt = lookAt;
}

//**************************************************************************************************************************
//**************************************************************************************************************************

void Camera::setUpVector(optix::float3 upVector) {
	this->upVector = upVector;
}

//**************************************************************************************************************************
//**************************************************************************************************************************

void Camera::setFov(float fov) {
	this->fov = fov;
}

//**************************************************************************************************************************
//**************************************************************************************************************************

void Camera::setAspectRatio(float aspectRatio) {
	this->aspectRatio = aspectRatio;
}

//**************************************************************************************************************************
//**************************************************************************************************************************

void Camera::prepareGPUPrograms(RTcontext* context) {
	RTprogram rayGenerationProgram;

	RT_CHECK_ERROR(rtProgramCreateFromPTXFile(*context, PINHOLE_CAMERA_PTX, "pinholeCamera", &rayGenerationProgram));
	RT_CHECK_ERROR(rtContextSetRayGenerationProgram(*context, 0, rayGenerationProgram));
}

//**************************************************************************************************************************
//**************************************************************************************************************************

void Camera::prepareGPUVariables(RTcontext* context) {
	RTvariable eye;
	RTvariable U;
	RTvariable V;
	RTvariable W;

	float3 cameraU;
	float3 cameraV;
	float3 cameraW;

	sutil::calculateCameraVariables(
		camEye, lookAt, upVector, fov, aspectRatio, cameraU, cameraV, cameraW
	);

	RT_CHECK_ERROR(rtContextDeclareVariable(*context, "eye", &eye));
	RT_CHECK_ERROR(rtContextDeclareVariable(*context, "U", &U));
	RT_CHECK_ERROR(rtContextDeclareVariable(*context, "V", &V));
	RT_CHECK_ERROR(rtContextDeclareVariable(*context, "W", &W));

	RT_CHECK_ERROR(rtVariableSet3fv(eye, &camEye.x));
	RT_CHECK_ERROR(rtVariableSet3fv(U, &cameraU.x));
	RT_CHECK_ERROR(rtVariableSet3fv(V, &cameraV.x));
	RT_CHECK_ERROR(rtVariableSet3fv(W, &cameraW.x));
}

//**************************************************************************************************************************
//**************************************************************************************************************************

void Camera::computeAspectRatio() {
	aspectRatio = (float)BUFFER_WIDTH / (float)BUFFER_HEIGHT;
}
